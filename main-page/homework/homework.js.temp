// Import Supabase client
import supabase from '../../supabase-config.js';

// DOM Elements
const homeworkList = document.getElementById('homeworkList');
const filterButton = document.getElementById('filterButton');
const sortButton = document.getElementById('sortButton');
const darkModeToggle = document.getElementById('darkModeToggle');
const noAssignmentsEl = document.getElementById('noAssignments');

// Status Counter Elements
const pendingCount = document.getElementById('pendingCount');
const progressCount = document.getElementById('progressCount');
const completedCount = document.getElementById('completedCount');
const overdueCount = document.getElementById('overdueCount');

// Filter and sort variables
let currentFilter = 'all'; // all, pending, in-progress, completed, overdue
let currentSort = 'due-date-asc'; // due-date-asc, due-date-desc, recently-added, status
let submittingHomeworkId = null; // Keep track of the homework being submitted

// Filter options
const filterOptions = [
    { id: 'all', label: 'All Assignments' },
    { id: 'pending', label: 'Pending' },
    { id: 'in-progress', label: 'In Progress' },
    { id: 'completed', label: 'Completed' },
    { id: 'overdue', label: 'Overdue' }
];

// Sort options
const sortOptions = [
    { id: 'due-date-asc', label: 'Due Date (Earliest)' },
    { id: 'due-date-desc', label: 'Due Date (Latest)' },
    { id: 'recently-added', label: 'Recently Added' },
    { id: 'status', label: 'Status' }
];

// Helper function to update dark mode icons
function updateDarkModeIcons(button, isDarkMode) {
    if (!button) return;
    
    const sunIcon = button.querySelector('svg:first-of-type');
    const moonIcon = button.querySelector('svg:last-of-type');
    
    if (isDarkMode) {
        sunIcon.style.display = 'block';
        moonIcon.style.display = 'none';
    } else {
        sunIcon.style.display = 'none';
        moonIcon.style.display = 'block';
    }
}

// Initialize dark mode
const isDarkMode = localStorage.getItem('darkMode') === 'enabled' ||
    (!localStorage.getItem('darkMode') && window.matchMedia('(prefers-color-scheme: dark)').matches);

if (isDarkMode) {
    document.documentElement.classList.add('dark');
} else {
    document.documentElement.classList.remove('dark');
}

// Set initial icon visibility
if (darkModeToggle) {
    updateDarkModeIcons(darkModeToggle, isDarkMode);
    
    // Dark Mode Toggle
    darkModeToggle.addEventListener('click', () => {
        document.documentElement.classList.toggle('dark');
        const isDarkMode = document.documentElement.classList.contains('dark');
        localStorage.setItem('darkMode', isDarkMode ? 'enabled' : 'disabled');
        
        // Force icon visibility update
        updateDarkModeIcons(darkModeToggle, isDarkMode);
    });
}

// Homework Status Colors
const statusColors = {
    'pending': {
        bg: 'bg-yellow-100 dark:bg-yellow-900/30',
        text: 'text-yellow-800 dark:text-yellow-300',
        icon: `<svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
              </svg>`
    },
    'in-progress': {
        bg: 'bg-primary-100 dark:bg-primary-900/30',
        text: 'text-primary-800 dark:text-primary-300',
        icon: `<svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
               </svg>`
    },
    'completed': {
        bg: 'bg-green-100 dark:bg-green-900/30',
        text: 'text-green-800 dark:text-green-300',
        icon: `<svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
               </svg>`
    },
    'overdue': {
        bg: 'bg-red-100 dark:bg-red-900/30',
        text: 'text-red-800 dark:text-red-300',
        icon: `<svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"></path>
               </svg>`
    }
};

// Create Homework Item Element
function createHomeworkItem(homework, isFirst = false) {
    const dueDate = new Date(homework.due_date);
    const now = new Date();
    const isOverdue = dueDate < now && homework.status !== 'completed';
    const status = isOverdue ? 'overdue' : (homework.status || 'pending');
    
    // Format the due date nicely
    const dateOptions = { weekday: 'short', month: 'short', day: 'numeric' };
    const formattedDate = dueDate.toLocaleDateString(undefined, dateOptions);
    
    // Calculate days remaining
    const daysRemaining = Math.ceil((dueDate - now) / (1000 * 60 * 60 * 24));
    let daysText = '';
    
    if (status === 'completed') {
        daysText = 'Completed';
    } else if (isOverdue) {
        daysText = `${Math.abs(daysRemaining)} day${Math.abs(daysRemaining) !== 1 ? 's' : ''} overdue`;
    } else if (daysRemaining === 0) {
        daysText = 'Due today';
    } else {
        daysText = `${daysRemaining} day${daysRemaining !== 1 ? 's' : ''} left`;
    }
    
    // Determine if submission button should be disabled (if already completed)
    const isCompleted = status === 'completed';
    const submitBtnClass = isCompleted ? 
        'bg-gray-300 text-gray-500 cursor-not-allowed' : 
        'bg-primary-500 hover:bg-primary-600 text-white';
    
    // Add extra padding at the top if it's the first item
    const topPadding = isFirst ? 'pt-6' : '';
    
    return `
        <div class="p-6 ${topPadding} hover:bg-gray-50 dark:hover:bg-gray-700/30 transition-all border border-gray-200 dark:border-gray-700 rounded-lg mb-4 shadow-lg hover:shadow-xl dark:shadow-gray-900/30 transform hover:-translate-y-1 duration-200">
            <div class="flex justify-between items-start">
                <div class="flex-1">
                    <div class="flex items-center space-x-4">
                        <h3 class="text-lg font-semibold text-gray-900 dark:text-white">${homework.title}</h3>
                        <span class="px-3 py-1 rounded-full text-sm font-medium flex items-center ${statusColors[status].bg} ${statusColors[status].text}">
                            ${statusColors[status].icon}
                            ${status.charAt(0).toUpperCase() + status.slice(1)}
                        </span>
                    </div>
                    <p class="mt-2 text-gray-600 dark:text-gray-300">${homework.description || 'No description provided.'}</p>
                    <div class="mt-4 flex flex-wrap items-center gap-4 text-sm">
                        <div class="flex items-center text-gray-500 dark:text-gray-400">
                            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                            </svg>
                            ${formattedDate}
                        </div>
                        <div class="flex items-center ${isOverdue ? 'text-red-500 dark:text-red-400' : 'text-gray-500 dark:text-gray-400'}">
                            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                            </svg>
                            ${daysText}
                        </div>
                        <div class="flex items-center text-gray-500 dark:text-gray-400">
                            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                            </svg>
                            N/A hours
                        </div>
                    </div>
                </div>
                <div class="flex items-center gap-2">
                    <button class="p-1 text-gray-400 hover:text-blue-500 dark:text-gray-500 dark:hover:text-blue-400 transition-colors rounded hover:bg-gray-100 dark:hover:bg-gray-700" 
                           onclick="viewDetails('${homework.id}')" title="View Details">
                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                        </svg>
                    </button>
                    <button id="submitBtn-${homework.id}" class="px-4 py-2 rounded-md ${submitBtnClass} transition-colors text-sm font-medium shadow-md relative flex items-center justify-center min-w-[100px] min-h-[36px] overflow-hidden" 
                           onclick="handleSubmitClick('${homework.id}')"
                           ${isCompleted ? 'disabled' : ''}>
                        <span class="btn-text relative z-10">${isCompleted ? 'Submitted' : 'Submit'}</span>
                        <div class="btn-loader hidden">
                            <span class="loader__element"></span>
                            <span class="loader__element"></span>
                            <span class="loader__element"></span>
                        </div>
                    </button>
                </div>
            </div>
        </div>
    `;
}

// Fetch and Display Homework
async function fetchHomework() {
    try {
        // Get current user
        const { data: { user }, error: userError } = await supabase.auth.getUser();
        
        if (userError || !user) {
            console.error('Authentication error:', userError);
            window.location.href = '../login page/login.html';
            return;
        }

        // Set up real-time subscription for homework
        const homeworkChannel = supabase
            .channel('homework_changes')
            .on(
                'postgres_changes',
                {
                    event: '*',
                    schema: 'public',
                    table: 'homework_assignments',
                    filter: `student_id=eq.${user.id}`
                },
                (payload) => {
                    console.log('Homework changed:', payload);
                    loadHomework(user.id);
                }
            )
            .subscribe((status) => {
                console.log('Homework subscription status:', status);
            });

        // Initial load
        await loadHomework(user.id);
    } catch (error) {
        console.error('Error in fetchHomework:', error);
    }
}

// Update status counters
function updateStatusCounters(homeworkData) {
    let pending = 0;
    let inProgress = 0;
    let completed = 0;
    let overdue = 0;
    
    homeworkData.forEach(hw => {
        const dueDate = new Date(hw.due_date);
        const now = new Date();
        const isOverdue = dueDate < now && hw.status !== 'completed';
        
        if (isOverdue) {
            overdue++;
        } else if (hw.status === 'completed') {
            completed++;
        } else if (hw.status === 'in-progress') {
            inProgress++;
        } else {
            pending++;
        }
    });
    
    pendingCount.textContent = pending;
    progressCount.textContent = inProgress;
    completedCount.textContent = completed;
    overdueCount.textContent = overdue;
}

// Delete homework function for button click
window.deleteHomework = async (homeworkId) => {
    if (!confirm('Are you sure you want to delete this homework?')) {
        return;
    }
    
    try {
        // First delete related submissions
        const { error: submissionsError } = await supabase
            .from('homework_submissions')
            .delete()
            .eq('assignment_id', homeworkId);  // Changed to use the correct column name (assignment_id)
            
        if (submissionsError) throw submissionsError;
        
        // Then delete related calendar events
        await deleteCalendarEventsForHomework(homeworkId);
        
        // Finally delete the homework assignment
        const { error } = await supabase
            .from('homework_assignments')
            .delete()
            .eq('id', homeworkId);
            
        if (error) throw error;
        
        // No need to refresh manually due to real-time subscription
        showNotification('Homework deleted successfully', 'success');
    } catch (error) {
        console.error('Error deleting homework:', error);
        showNotification('Failed to delete homework: ' + error.message, 'error');
    }
};

// Update status function
window.updateStatus = async (homeworkId) => {
    try {
        // First get the current status
        const { data, error: fetchError } = await supabase
            .from('homework_assignments')
            .select(`
                id,
                homework_submissions(status)
            `)
            .eq('id', homeworkId)
            .single();
            
        if (fetchError) throw fetchError;
        
        // Determine current status and next status
        const currentStatus = data.homework_submissions && data.homework_submissions[0] ? 
            data.homework_submissions[0].status : 'pending';
            
        let nextStatus;
        if (currentStatus === 'pending') nextStatus = 'in-progress';
        else if (currentStatus === 'in-progress') nextStatus = 'completed';
        else if (currentStatus === 'completed') nextStatus = 'pending';
        else if (currentStatus === 'overdue') nextStatus = 'in-progress';
        
        // Update the status
        const { error: updateError } = await supabase
            .from('homework_submissions')
            .upsert({
                assignment_id: homeworkId, // Changed to use the correct column name (assignment_id)
                status: nextStatus,
                updated_at: new Date().toISOString()
            });
            
        if (updateError) throw updateError;
        
        // Refresh the UI via subscription
    } catch (error) {
        console.error('Error updating status:', error);
        showNotification('Failed to update status: ' + error.message, 'error');
    }
};

// Submit homework function
window.submitHomework = async function(homeworkId) {
    try {
        // First get the current status
        const { data, error: fetchError } = await supabase
            .from('homework_assignments')
            .select(`
                id,
                title,
                description,
                due_date,
                class_id,
                homework_submissions(status)
            `)
            .eq('id', homeworkId)
            .single();
            
        if (fetchError) throw fetchError;
        
        // Check if already completed
        const currentStatus = data.homework_submissions && data.homework_submissions[0] ? 
            data.homework_submissions[0].status : 'pending';
        
        if (currentStatus === 'completed') {
            showNotification('This assignment is already marked as completed.', 'info');
            return;
        }
        
        // Format due date for display
        const dueDate = new Date(data.due_date);
        const formattedDate = dueDate.toLocaleDateString(undefined, 
            { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' });
        
        // Create submission modal
        const modalContainer = document.createElement('div');
        modalContainer.id = 'submitHomeworkModal';
        modalContainer.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-[1000] overflow-y-auto p-4';
        
        // Modal content
        modalContainer.innerHTML = `
            <div class="bg-white dark:bg-gray-800 rounded-xl shadow-xl w-full max-w-2xl p-6 relative">
                <h2 class="text-2xl font-bold mb-2 text-gray-900 dark:text-white">Submit Assignment</h2>
                
                <div class="bg-blue-50 dark:bg-blue-900/20 border-l-4 border-blue-500 text-blue-700 dark:text-blue-300 p-4 mb-4">
                    <div class="flex">
                        <div class="flex-shrink-0">
                            <svg class="h-5 w-5 text-blue-500" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd" />
                            </svg>
                        </div>
                        <div class="ml-3">
                            <p class="text-sm font-medium">
                                You are submitting the assignment: <span class="font-bold">${data.title}</span>
                            </p>
                            <p class="text-sm mt-1">
                                Due: ${formattedDate}
                            </p>
                        </div>
                    </div>
                </div>
                
                <form id="submissionForm" class="space-y-6">
                    <div>
                        <label for="submission-notes" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                            Submission Notes
                        </label>
                        <textarea id="submission-notes" rows="4" 
                            class="w-full px-3 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 dark:text-white"
                            placeholder="Add any notes or comments about your submission..."></textarea>
                        <p class="mt-1 text-sm text-gray-500 dark:text-gray-400">Explain your work or any challenges you faced</p>
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                            Upload Files
                        </label>
                        <div class="mt-1 flex justify-center px-6 pt-5 pb-6 border-2 border-gray-300 dark:border-gray-600 border-dashed rounded-md">
                            <div class="space-y-1 text-center">
                                <svg class="mx-auto h-12 w-12 text-gray-400" stroke="currentColor" fill="none" viewBox="0 0 48 48" aria-hidden="true">
                                    <path d="M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4h-12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                                </svg>
                                <div class="flex text-sm text-gray-600 dark:text-gray-400">
                                    <label for="file-upload" class="relative cursor-pointer bg-white dark:bg-gray-700 rounded-md font-medium text-primary-600 dark:text-primary-400 hover:text-primary-500 focus-within:outline-none">
                                        <span>Upload files</span>
                                        <input id="file-upload" name="file-upload" type="file" class="sr-only" multiple>
                                    </label>
                                    <p class="pl-1">or drag and drop</p>
                                </div>
                                <p class="text-xs text-gray-500 dark:text-gray-400">
                                    PDF, DOCX, PNG, JPG up to 10MB
                                </p>
                            </div>
                        </div>
                        <div id="file-list" class="mt-2 text-sm text-gray-500 dark:text-gray-400"></div>
                    </div>
                    
                    <div class="border-t border-gray-200 dark:border-gray-700 pt-4">
                        <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                            Submission Checklist
                        </label>
                        <div class="mt-2 space-y-2">
                            <div class="flex items-center">
                                <input type="checkbox" id="check-complete" class="rounded border-gray-300 text-primary-600 focus:ring-primary-500 dark:border-gray-600 dark:bg-gray-700">
                                <label for="check-complete" class="ml-2 text-sm text-gray-700 dark:text-gray-300">
                                    I have completed all requirements for this assignment
                                </label>
                            </div>
                            <div class="flex items-center">
                                <input type="checkbox" id="check-reviewed" class="rounded border-gray-300 text-primary-600 focus:ring-primary-500 dark:border-gray-600 dark:bg-gray-700">
                                <label for="check-reviewed" class="ml-2 text-sm text-gray-700 dark:text-gray-300">
                                    I have reviewed my work before submission
                                </label>
                            </div>
                        </div>
                    </div>
                    
                    <div class="flex space-x-4 pt-4">
                        <button type="button" id="cancelSubmitBtn"
                            class="px-4 py-2 border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 rounded-md hover:bg-gray-100 dark:hover:bg-gray-700">
                            Cancel
                        </button>
                        <button type="submit" id="submitBtn"
                            class="flex-1 px-4 py-2 bg-primary-500 text-white rounded-md hover:bg-primary-600 transition-colors font-medium relative flex items-center justify-center min-h-[42px] overflow-hidden">
                            <span class="btn-text relative z-10">Submit Assignment</span>
                            <div class="btn-loader hidden">
                                <span class="loader__element"></span>
                                <span class="loader__element"></span>
                                <span class="loader__element"></span>
                            </div>
                        </button>
                    </div>
                </form>
            </div>
        `;
        
        // Add to document
        document.body.appendChild(modalContainer);
        
        // Function to reset the original button state
        function resetOriginalButton() {
            resetSubmitButton(); // Use the global reset function
        }
        
        // Function to close the modal
        function closeModal() {
            resetOriginalButton();
            document.body.removeChild(modalContainer);
            document.removeEventListener('keydown', handleEscKey);
        }
        
        // Handle escape key
        function handleEscKey(e) {
            if (e.key === 'Escape') {
                closeModal();
            }
        }
        
        // Add escape key listener
        document.addEventListener('keydown', handleEscKey);
        
        // Set up file upload preview
        const fileUpload = document.getElementById('file-upload');
        const fileList = document.getElementById('file-list');
        
        fileUpload.addEventListener('change', () => {
            fileList.innerHTML = '';
            
            if (fileUpload.files.length > 0) {
                const fileListTitle = document.createElement('p');
                fileListTitle.className = 'font-medium mb-1';
                fileListTitle.textContent = 'Selected files:';
                fileList.appendChild(fileListTitle);
                
                const fileListUl = document.createElement('ul');
                fileListUl.className = 'list-disc pl-5';
                
                Array.from(fileUpload.files).forEach(file => {
                    const listItem = document.createElement('li');
                    listItem.textContent = `${file.name} (${formatFileSize(file.size)})`;
                    fileListUl.appendChild(listItem);
                });
                
                fileList.appendChild(fileListUl);
            }
        });
        
        // Submit button validation
        const submitBtn = document.getElementById('submitBtn');
        const checkComplete = document.getElementById('check-complete');
        const checkReviewed = document.getElementById('check-reviewed');
        
        function validateForm() {
            if (checkComplete.checked && checkReviewed.checked) {
                submitBtn.disabled = false;
                submitBtn.classList.remove('opacity-50', 'cursor-not-allowed');
            } else {
                submitBtn.disabled = true;
                submitBtn.classList.add('opacity-50', 'cursor-not-allowed');
            }
        }
        
        // Initial validation
        submitBtn.disabled = true;
        submitBtn.classList.add('opacity-50', 'cursor-not-allowed');
        
        // Add validation listeners
        checkComplete.addEventListener('change', validateForm);
        checkReviewed.addEventListener('change', validateForm);
        
        // Cancel button event listener
        document.getElementById('cancelSubmitBtn').addEventListener('click', () => {
            closeModal();
        });
        
        // Form submission
        document.getElementById('submissionForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            // Get the button elements
            const submitBtn = document.getElementById('submitBtn');
            const btnText = submitBtn.querySelector('.btn-text');
            const btnLoader = submitBtn.querySelector('.btn-loader');
            
            // Show loading animation
            btnText.classList.add('hidden');
            btnLoader.classList.remove('hidden');
            
            // Disable submit button and show loading state
            submitBtn.disabled = true;
            
            const submissionNotes = document.getElementById('submission-notes').value.trim();
            const files = fileUpload.files;
            
            try {
                // First update the status to completed and add notes
                const { data: submissionData, error: updateError } = await supabase
                    .from('homework_submissions')
                    .upsert({
                        assignment_id: homeworkId,
                        status: 'completed',
                        notes: submissionNotes || null,
                        updated_at: new Date().toISOString()
                    })
                    .select();
                    
                if (updateError) throw updateError;
                
                // Handle file uploads if any
                if (files && files.length > 0) {
                    for (let i = 0; i < files.length; i++) {
                        const file = files[i];
                        const fileExt = file.name.split('.').pop();
                        const fileName = `${homeworkId}_${Date.now()}_${i}.${fileExt}`;
                        const filePath = `submissions/${homeworkId}/${fileName}`;
                        
                        // Upload the file to storage
                        const { error: uploadError } = await supabase.storage
                            .from('homework-files')
                            .upload(filePath, file);
                            
                        if (uploadError) throw uploadError;
                        
                        // Get public URL
                        const { data: urlData } = await supabase.storage
                            .from('homework-files')
                            .getPublicUrl(filePath);
                            
                        // Save file reference to database
                        const { error: fileError } = await supabase
                            .from('submission_files')
                            .insert({
                                submission_id: submissionData[0].id,
                                file_name: file.name,
                                file_path: filePath,
                                file_url: urlData.publicUrl,
                                file_size: file.size,
                                file_type: file.type
                            });
                            
                        if (fileError) throw fileError;
                    }
                }
                
                // Close modal and update the original button to "Submitted" state
                document.removeEventListener('keydown', handleEscKey);
                document.body.removeChild(modalContainer);
                
                // Update the button in the card to show "Submitted"
                const originalBtn = document.getElementById(`submitBtn-${homeworkId}`);
                if (originalBtn) {
                    const originalBtnText = originalBtn.querySelector('.btn-text');
                    const originalBtnLoader = originalBtn.querySelector('.btn-loader');
                    
                    originalBtnText.textContent = 'Submitted';
                    originalBtnText.classList.remove('hidden');
                    originalBtnLoader.classList.add('hidden');
                    originalBtn.disabled = true;
                    originalBtn.classList.add('bg-gray-300', 'text-gray-500', 'cursor-not-allowed');
                    originalBtn.classList.remove('bg-primary-500', 'hover:bg-primary-600', 'text-white');
                }
                
                showNotification('Assignment submitted successfully!', 'success');
            } catch (error) {
                console.error('Error submitting homework:', error);
                
                // Reset the button state
                btnText.classList.remove('hidden');
                btnLoader.classList.add('hidden');
                submitBtn.disabled = checkComplete.checked && checkReviewed.checked ? false : true;
                
                showNotification('Failed to submit assignment: ' + error.message, 'error');
            }
        });
        
    } catch (error) {
        console.error('Error preparing homework submission:', error);
        showNotification('Failed to open submission form: ' + error.message, 'error');
    }
};

// Helper function to format file size
function formatFileSize(bytes) {
    if (bytes === 0) return '0 Bytes';
    
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

// View details function
window.viewDetails = async function(homeworkId) {
    try {
        // Fetch the homework data
        const { data: homework, error } = await supabase
            .from('homework_assignments')
            .select(`
                *,
                homework_submissions(status)
            `)
            .eq('id', homeworkId)
            .single();
            
        if (error) throw error;
        
        // Fetch attachments for this homework
        const { data: attachments, error: attachmentsError } = await supabase
            .from('homework_attachments')
            .select('*')
            .eq('homework_id', homeworkId);
            
        if (attachmentsError) throw attachmentsError;
        
        // Create details modal
        const modalContainer = document.createElement('div');
        modalContainer.id = 'homeworkDetailsModal';
        modalContainer.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-[1000]';
        
        // Format due date for display
        const dueDate = new Date(homework.due_date);
        const formattedDate = dueDate.toLocaleDateString(undefined, 
            { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' });
            
        // Get status info
        const status = homework.homework_submissions && homework.homework_submissions[0] 
            ? homework.homework_submissions[0].status : 'pending';
            
        // Modal content
        modalContainer.innerHTML = `
            <div class="bg-white dark:bg-gray-800 rounded-xl shadow-xl w-full max-w-md p-6 relative">
                <h2 class="text-2xl font-bold mb-2 text-gray-900 dark:text-white">${homework.title}</h2>
                
                <div class="mb-4">
                    <span class="px-3 py-1 rounded-full text-sm font-medium inline-flex items-center ${statusColors[status].bg} ${statusColors[status].text}">
                        ${statusColors[status].icon}
                        ${status.charAt(0).toUpperCase() + status.slice(1)}
                    </span>
                </div>
                
                <div class="mb-4">
                    <h3 class="text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Due Date</h3>
                    <p class="text-gray-800 dark:text-gray-200">${formattedDate}</p>
                </div>
                
                <div class="mb-4">
                    <h3 class="text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Description</h3>
                    <p class="text-gray-800 dark:text-gray-200">${homework.description || 'No description provided.'}</p>
                </div>
                
                ${attachments && attachments.length > 0 ? `
                    <div class="mb-4">
                        <h3 class="text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Attachments</h3>
                        <ul class="list-disc pl-5">
                            ${attachments.map(attachment => `
                                <li>
                                    <a href="${attachment.file_url}" target="_blank" class="text-primary-600 dark:text-primary-400 hover:underline">
                                        ${attachment.file_name}
                                    </a>
                                </li>
                            `).join('')}
                        </ul>
                    </div>
                ` : ''}
                
                <div class="flex justify-end mt-6">
                    <button id="closeDetailsBtn" class="px-4 py-2 bg-gray-200 dark:bg-gray-700 text-gray-800 dark:text-gray-200 rounded hover:bg-gray-300 dark:hover:bg-gray-600 transition-colors">
                        Close
                    </button>
                </div>
            </div>
        `;
        
        // Add to document
        document.body.appendChild(modalContainer);
        
        // Function to close modal
        function closeModal() {
            document.body.removeChild(modalContainer);
            document.removeEventListener('keydown', handleEscKey);
        }
        
        // Handle escape key
        function handleEscKey(e) {
            if (e.key === 'Escape') {
                closeModal();
            }
        }
        
        // Add escape key listener
        document.addEventListener('keydown', handleEscKey);
        
        // Close button event listener
        document.getElementById('closeDetailsBtn').addEventListener('click', closeModal);
        
    } catch (error) {
        console.error('Error viewing homework details:', error);
        showNotification('Failed to load homework details: ' + error.message, 'error');
    }
};

// Add homework button event listener
if (addHomeworkBtn) {
    addHomeworkBtn.addEventListener('click', () => {
        showAddHomeworkModal();
    });
}

// Create and show the add homework modal
function showAddHomeworkModal() {
    // Create modal container
    const modalContainer = document.createElement('div');
    modalContainer.id = 'addHomeworkModal';
    modalContainer.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-[1000]';
    
    // Create modal content
    const modalContent = document.createElement('div');
    modalContent.className = 'bg-white dark:bg-gray-800 rounded-xl shadow-xl w-full max-w-md p-6 relative';
    
    // Create modal HTML content
    modalContent.innerHTML = `
        <h2 class="text-2xl font-bold mb-4 text-gray-900 dark:text-white">Add New Assignment</h2>
        <form id="addHomeworkForm" class="space-y-4">
            <div>
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300">Title</label>
                <input type="text" id="homework-title" required
                    class="mt-1 block w-full px-3 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 dark:text-white">
            </div>

            <div>
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300">Description</label>
                <textarea id="homework-description" rows="3" 
                    class="mt-1 block w-full px-3 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 dark:text-white"></textarea>
            </div>

            <div>
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300">Due Date</label>
                <input type="date" id="homework-due-date" required
                    class="mt-1 block w-full px-3 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 dark:text-white">
            </div>

            <div>
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300">Subject/Class</label>
                <select id="homework-class" required
                    class="mt-1 block w-full px-3 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 dark:text-white">
                    <option value="" disabled selected>Select a subject</option>
                    <option value="math">Mathematics</option>
                    <option value="science">Science</option>
                    <option value="english">English</option>
                    <option value="history">History</option>
                    <option value="cs">Computer Science</option>
                    <option value="art">Art</option>
                    <option value="other">Other</option>
                </select>
            </div>
            
            <div>
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300">Reminders</label>
                <div class="mt-2 space-y-2">
                    <div class="flex items-center">
                        <input type="checkbox" id="reminder-1day" class="rounded border-gray-300 text-primary-600 focus:ring-primary-500 dark:border-gray-600 dark:bg-gray-700">
                        <label for="reminder-1day" class="ml-2 text-sm text-gray-700 dark:text-gray-300">1 day before</label>
                    </div>
                    <div class="flex items-center">
                        <input type="checkbox" id="reminder-3day" class="rounded border-gray-300 text-primary-600 focus:ring-primary-500 dark:border-gray-600 dark:bg-gray-700">
                        <label for="reminder-3day" class="ml-2 text-sm text-gray-700 dark:text-gray-300">3 days before</label>
                    </div>
                    <div class="flex items-center">
                        <input type="checkbox" id="reminder-1week" class="rounded border-gray-300 text-primary-600 focus:ring-primary-500 dark:border-gray-600 dark:bg-gray-700">
                        <label for="reminder-1week" class="ml-2 text-sm text-gray-700 dark:text-gray-300">1 week before</label>
                    </div>
                </div>
            </div>
            
            <div>
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300">Time Tracking</label>
                <div class="flex space-x-2">
                    <input type="number" id="homework-estimated-hours" min="0" step="0.5" placeholder="0.0" 
                        class="mt-1 w-24 px-3 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 dark:text-white">
                    <span class="self-center text-gray-700 dark:text-gray-300">hours</span>
                </div>
                <p class="mt-1 text-sm text-gray-500 dark:text-gray-400">Estimated time to complete</p>
            </div>
            
            <div>
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300">Grade Tracking</label>
                <div class="flex space-x-4 mt-1">
                    <div>
                        <label for="expected-grade" class="text-xs text-gray-500 dark:text-gray-400">Expected</label>
                        <input type="number" id="expected-grade" min="0" max="100" step="1" placeholder="90"
                            class="block w-20 px-3 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 dark:text-white">
                    </div>
                    <div>
                        <label for="actual-grade" class="text-xs text-gray-500 dark:text-gray-400">Actual</label>
                        <input type="number" id="actual-grade" min="0" max="100" step="1" placeholder="Not graded" 
                            class="block w-20 px-3 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 dark:text-white">
                    </div>
                </div>
            </div>
            
            <div>
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300">Attachments</label>
                <div class="mt-1 flex justify-center px-6 pt-5 pb-6 border-2 border-gray-300 dark:border-gray-600 border-dashed rounded-md">
                    <div class="space-y-1 text-center">
                        <svg class="mx-auto h-12 w-12 text-gray-400" stroke="currentColor" fill="none" viewBox="0 0 48 48" aria-hidden="true">
                            <path d="M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4h-12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                        </svg>
                        <div class="flex text-sm text-gray-600 dark:text-gray-400">
                            <label for="file-upload" class="relative cursor-pointer bg-white dark:bg-gray-700 rounded-md font-medium text-primary-600 dark:text-primary-400 hover:text-primary-500 focus-within:outline-none">
                                <span>Upload files</span>
                                <input id="file-upload" name="file-upload" type="file" class="sr-only" multiple>
                            </label>
                            <p class="pl-1">or drag and drop</p>
                        </div>
                        <p class="text-xs text-gray-500 dark:text-gray-400">
                            PDF, DOCX, PNG, JPG up to 10MB
                        </p>
                    </div>
                </div>
                <div id="file-list" class="mt-2"></div>
            </div>

            <div class="flex space-x-4 pt-4">
                <button type="button" id="cancelHomeworkBtn"
                    class="flex-1 px-4 py-2 border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 rounded-md hover:bg-gray-100 dark:hover:bg-gray-700">
                    Cancel
                </button>
                <button type="submit"
                    class="flex-1 px-4 py-2 bg-primary-500 text-white rounded-md hover:bg-primary-600 transition-colors">
                    Save Assignment
                </button>
            </div>
        </form>
    `;
    
    // Append modal to container
    modalContainer.appendChild(modalContent);
    
    // Append modal to body
    document.body.appendChild(modalContainer);
    
    // Function to close the modal
    function closeModal() {
        document.body.removeChild(modalContainer);
        document.removeEventListener('keydown', handleEscKey);
    }
    
    // Handle escape key press
    function handleEscKey(e) {
        if (e.key === 'Escape') {
            closeModal();
        }
    }
    
    // Add escape key listener
    document.addEventListener('keydown', handleEscKey);
    
    // Add event listeners
    const cancelBtn = document.getElementById('cancelHomeworkBtn');
    const addForm = document.getElementById('addHomeworkForm');
    
    // Set min date to today
    const dueDateInput = document.getElementById('homework-due-date');
    const today = new Date().toISOString().split('T')[0];
    dueDateInput.min = today;
    
    // Cancel button
    cancelBtn.addEventListener('click', closeModal);
    
    // Form submission
    addForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        const title = document.getElementById('homework-title').value;
        const description = document.getElementById('homework-description').value;
        const dueDate = document.getElementById('homework-due-date').value;
        const classId = document.getElementById('homework-class').value;
        
        // Get reminder values
        const reminders = [];
        if (document.getElementById('reminder-1day').checked) reminders.push('1day');
        if (document.getElementById('reminder-3day').checked) reminders.push('3day');
        if (document.getElementById('reminder-1week').checked) reminders.push('1week');
        
        // Get time tracking value
        const estimatedHours = document.getElementById('homework-estimated-hours').value || null;
        
        // Get grade tracking values
        const expectedGrade = document.getElementById('expected-grade').value || null;
        const actualGrade = document.getElementById('actual-grade').value || null;
        
        // Get file attachments (placeholder - actual file upload would need storage integration)
        const fileInput = document.getElementById('file-upload');
        const files = fileInput.files;
        
        // Create homework object
        const homework = {
            title,
            description,
            due_date: dueDate,
            class_id: classId,
            status: 'pending',
            created_at: new Date().toISOString(),
            reminders,
            estimated_hours: estimatedHours ? parseFloat(estimatedHours) : null,
            expected_grade: expectedGrade ? parseFloat(expectedGrade) : null,
            actual_grade: actualGrade ? parseFloat(actualGrade) : null,
        };

        try {
            // Save to Supabase
            const { data, error } = await supabase
                .from('homework_assignments')
                .insert([homework])
                .select();

            if (error) throw error;

            // Get the inserted homework with its ID
            const newHomework = data[0];
            
            // Add homework to calendar for reminders
            if (reminders.length > 0) {
                addToCalendar(newHomework);
            }
            
            // Handle file uploads if any
            if (files && files.length > 0) {
                await handleFileUploads(files, newHomework.id);
            }
            
            // Close modal and reload homework list
            closeModal();
            loadHomework();
            
            // Show success message
            showNotification('Assignment added successfully!', 'success');
        } catch (error) {
            console.error('Error adding homework:', error);
            showNotification('Failed to add homework. Please try again.', 'error');
        }
    });
}

// Show notification
function showNotification(message, type = 'info') {
    // Create notification element
    const notification = document.createElement('div');
    
    // Set classes based on type
    let bgColor, textColor;
    if (type === 'success') {
        bgColor = 'bg-green-100 dark:bg-green-900/30';
        textColor = 'text-green-800 dark:text-green-300';
    } else if (type === 'error') {
        bgColor = 'bg-red-100 dark:bg-red-900/30';
        textColor = 'text-red-800 dark:text-red-300';
    } else {
        bgColor = 'bg-blue-100 dark:bg-blue-900/30';
        textColor = 'text-blue-800 dark:text-blue-300';
    }
    
    notification.className = `fixed top-4 right-4 ${bgColor} ${textColor} px-4 py-3 rounded-lg shadow-md z-[2000] flex items-center`;
    
    // Icon based on type
    let icon;
    if (type === 'success') {
        icon = `<svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
               </svg>`;
    } else if (type === 'error') {
        icon = `<svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
               </svg>`;
    } else {
        icon = `<svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
               </svg>`;
    }
    
    notification.innerHTML = `
        ${icon}
        <span>${message}</span>
    `;
    
    // Add to body
    document.body.appendChild(notification);
    
    // Remove after 3 seconds
    setTimeout(() => {
        if (document.body.contains(notification)) {
            document.body.removeChild(notification);
        }
    }, 3000);
}

// Sort functionality
if (sortButton) {
    sortButton.addEventListener('click', () => {
        showSortMenu();
    });
}

function showSortMenu() {
    // Create sort menu
    const sortMenu = document.createElement('div');
    sortMenu.className = 'absolute right-0 mt-2 w-48 bg-white dark:bg-gray-800 rounded-md shadow-lg py-1 z-20 border border-gray-100 dark:border-gray-700';
    sortMenu.style.top = '100%';
    
    // Create menu items
    sortOptions.forEach(option => {
        const item = document.createElement('button');
        item.className = `block w-full text-left px-4 py-2 text-sm ${currentSort === option.id ? 
            'bg-primary-50 dark:bg-primary-900/20 text-primary-600 dark:text-primary-400' : 
            'text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700'}`;
        item.textContent = option.label;
        
        item.addEventListener('click', () => {
            currentSort = option.id;
            applyFiltersAndSort();
            document.body.removeChild(sortMenu);
        });
        
        sortMenu.appendChild(item);
    });
    
    // Position menu relative to sort button
    const buttonRect = sortButton.getBoundingClientRect();
    sortMenu.style.position = 'fixed';
    sortMenu.style.top = `${buttonRect.bottom + window.scrollY}px`;
    sortMenu.style.left = `${buttonRect.left + window.scrollX}px`;
    
    // Add click outside to close
    function handleClickOutside(e) {
        if (!sortMenu.contains(e.target) && e.target !== sortButton) {
            document.body.removeChild(sortMenu);
            document.removeEventListener('click', handleClickOutside);
        }
    }
    
    // Add to body
    document.body.appendChild(sortMenu);
    
    // Add event listener with slight delay to prevent immediate closing
    setTimeout(() => {
        document.addEventListener('click', handleClickOutside);
    }, 100);
}

// Sort homework data
function sortHomeworkData(homeworkData) {
    return [...homeworkData].sort((a, b) => {
        if (currentSort === 'due-date-asc') {
            return new Date(a.due_date) - new Date(b.due_date);
        } else if (currentSort === 'due-date-desc') {
            return new Date(b.due_date) - new Date(a.due_date);
        } else if (currentSort === 'recently-added') {
            return new Date(b.created_at) - new Date(a.created_at);
        } else if (currentSort === 'status') {
            // Priority: overdue > pending > in-progress > completed
            const statusPriority = {
                'overdue': 0,
                'pending': 1,
                'in-progress': 2,
                'completed': 3
            };
            
            // Calculate if overdue
            const aDueDate = new Date(a.due_date);
            const bDueDate = new Date(b.due_date);
            const now = new Date();
            
            const aIsOverdue = aDueDate < now && a.status !== 'completed';
            const bIsOverdue = bDueDate < now && b.status !== 'completed';
            
            const aStatus = aIsOverdue ? 'overdue' : a.status;
            const bStatus = bIsOverdue ? 'overdue' : b.status;
            
            return statusPriority[aStatus] - statusPriority[bStatus];
        }
        
        return 0;
    });
}

// Apply filters and sort to homework data
function applyFiltersAndSort() {
    // Get current user
    supabase.auth.getUser().then(({ data: { user } }) => {
        if (user) {
            loadHomework(user.id);
        }
    });
}

// Filter homework data based on current filter
function filterHomeworkData(homeworkData) {
    if (currentFilter === 'all') {
        return homeworkData;
    }
    
    const now = new Date();
    
    return homeworkData.filter(homework => {
        const dueDate = new Date(homework.due_date);
        const isOverdue = dueDate < now && homework.status !== 'completed';
        
        if (currentFilter === 'overdue' && isOverdue) {
            return true;
        }
        
        if (currentFilter === 'completed' && homework.status === 'completed') {
            return true;
        }
        
        if (currentFilter === 'in-progress' && homework.status === 'in-progress') {
            return true;
        }
        
        if (currentFilter === 'pending' && homework.status === 'pending' && !isOverdue) {
            return true;
        }
        
        return false;
    });
}

// Update load homework function to use filters and sorting
async function loadHomework(userId) {
    try {
        // Show loading state
        homeworkList.innerHTML = `
            <div class="p-6 pt-8 animate-pulse">
                <div class="flex justify-between items-start">
                    <div class="flex-1">
                        <div class="flex items-center space-x-4">
                            <div class="h-5 bg-gray-200 dark:bg-gray-700 rounded w-1/4"></div>
                            <div class="h-6 bg-gray-200 dark:bg-gray-700 rounded-full w-16"></div>
                        </div>
                        <div class="h-4 bg-gray-200 dark:bg-gray-700 rounded w-3/4 mt-2"></div>
                        <div class="mt-4 flex items-center space-x-4">
                            <div class="h-4 bg-gray-200 dark:bg-gray-700 rounded w-24"></div>
                            <div class="h-4 bg-gray-200 dark:bg-gray-700 rounded w-32"></div>
                        </div>
                    </div>
                    <div class="flex space-x-4">
                        <div class="h-6 w-6 bg-gray-200 dark:bg-gray-700 rounded"></div>
                        <div class="h-6 w-6 bg-gray-200 dark:bg-gray-700 rounded"></div>
                    </div>
                </div>
            </div>
        `;

        // Determine sort order for initial query
        const orderField = currentSort.startsWith('due-date') ? 'due_date' : 
                        (currentSort === 'recently-added' ? 'created_at' : 'due_date');
        const ascending = currentSort === 'due-date-asc';

        const { data: homeworkData, error } = await supabase
            .from('homework_assignments')
            .select(`
                id,
                title,
                description,
                due_date,
                class_id,
                created_at,
                updated_at,
                homework_submissions(status)
            `)
            .order(orderField, { ascending });

        if (error) {
            throw error;
        }

        homeworkList.innerHTML = '';
        
        if (homeworkData.length === 0) {
            homeworkList.innerHTML = '<div class="p-8 mt-2 text-center text-gray-500 dark:text-gray-400">You have no homework assignments.</div>';
            noAssignmentsEl.classList.remove('hidden');
            updateStatusCounters([]);
            return;
        }

        // Process homework data - Add status property
        homeworkData.forEach((homework) => {
            const submission = homework.homework_submissions && homework.homework_submissions[0];
            homework.status = submission ? submission.status : 'pending';
        });
        
        // Apply filter
        const filteredData = filterHomeworkData(homeworkData);
        
        // Apply sort (for status or other complex sorts)
        const sortedData = currentSort === 'status' ? sortHomeworkData(filteredData) : filteredData;
        
        if (filteredData.length === 0) {
            homeworkList.innerHTML = `<div class="p-8 mt-2 text-center text-gray-500 dark:text-gray-400">No ${currentFilter} assignments found.</div>`;
            noAssignmentsEl.classList.add('hidden');
        } else {
            noAssignmentsEl.classList.add('hidden');
            
            // Clear the list
            homeworkList.innerHTML = '';
            
            // Display sorted and filtered data with proper spacing
            sortedData.forEach((homework, index) => {
                const homeworkItem = createHomeworkItem(homework, index === 0);
                homeworkList.innerHTML += homeworkItem;
            });
        }
        
        // Update counters based on all data
        updateStatusCounters(homeworkData);
        
        // Update filter button text to show active filter
        if (filterButton) {
            const filterName = filterOptions.find(opt => opt.id === currentFilter)?.label || 'Filter';
            const filterLabel = filterButton.querySelector('span');
            if (filterLabel) {
                filterLabel.textContent = filterName;
            }
        }
        
        // Update sort button text to show active sort
        if (sortButton) {
            const sortName = sortOptions.find(opt => opt.id === currentSort)?.label || 'Sort';
            const sortLabel = sortButton.querySelector('span');
            if (sortLabel) {
                sortLabel.textContent = sortName;
            }
        }
        
    } catch (error) {
        console.error('Error loading homework:', error);
        homeworkList.innerHTML = `
            <div class="p-8 text-center">
                <svg class="w-16 h-16 mx-auto text-red-500 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"></path>
                </svg>
                <p class="text-red-500 dark:text-red-400 font-medium mb-2">Error loading homework assignments</p>
                <p class="text-gray-500 dark:text-gray-400">Please refresh the page to try again</p>
            </div>
        `;
    }
}

// Calendar integration functions for reminders
function addToCalendar(homework) {
    try {
        // Calculate reminder dates based on due date
        const dueDate = new Date(homework.due_date);
        const reminders = homework.reminders || [];
        
        // Add each reminder to the calendar
        reminders.forEach(reminder => {
            let reminderDate = new Date(dueDate);
            
            // Calculate the date for the reminder
            if (reminder === '1day') {
                reminderDate.setDate(reminderDate.getDate() - 1);
            } else if (reminder === '3day') {
                reminderDate.setDate(reminderDate.getDate() - 3);
            } else if (reminder === '1week') {
                reminderDate.setDate(reminderDate.getDate() - 7);
            }
            
            // Create calendar event
            const calendarEvent = {
                title: `Reminder: ${homework.title}`,
                description: `Due date for assignment "${homework.title}" is approaching.`,
                start_date: reminderDate.toISOString(),
                end_date: new Date(reminderDate.getTime() + 30 * 60000).toISOString(), // 30 min duration
                type: 'reminder',
                homework_id: homework.id,
                reminder_type: reminder
            };
            
            // Save to calendar events table
            saveCalendarEvent(calendarEvent);
        });
    } catch (error) {
        console.error('Error adding to calendar:', error);
    }
}

// Function to update calendar events simply for homework edits
function updateCalendarEventSimple(homework) {
    try {
        // First remove existing calendar events for this homework
        deleteCalendarEventsForHomework(homework.id)
        .then(() => {
            // Create the main homework event
            return createCalendarEvent({
                title: `Due: ${homework.title}`,
                description: homework.description || '',
                start_date: homework.due_date,
                end_date: homework.due_date,
                all_day: true,
                type: 'homework',
                homework_id: homework.id,
                color: getClassColor(homework.class_id)
            });
        })
        .then(() => {
            // Create reminder events if needed
            if (homework.reminders && homework.reminders.length > 0) {
                const dueDate = new Date(homework.due_date);
                
                // Create reminders one at a time
                return homework.reminders.reduce((promise, reminder) => {
                    return promise.then(() => {
                        let reminderDate = new Date(dueDate);
                        
                        // Calculate the reminder date
                        if (reminder === '1day') {
                            reminderDate.setDate(reminderDate.getDate() - 1);
                        } else if (reminder === '3day') {
                            reminderDate.setDate(reminderDate.getDate() - 3);
                        } else if (reminder === '1week') {
                            reminderDate.setDate(reminderDate.getDate() - 7);
                        }
                        
                        // Create the reminder event
                        return createCalendarEvent({
                            title: `Reminder: ${homework.title}`,
                            description: `Due on ${formatDate(dueDate)}`,
                            start_date: reminderDate.toISOString().split('T')[0],
                            end_date: reminderDate.toISOString().split('T')[0],
                            all_day: true,
                            type: 'homework_reminder',
                            homework_id: homework.id,
                            color: getClassColor(homework.class_id, true)
                        });
                    });
                }, Promise.resolve());
            }
        })
        .catch(error => {
            console.error('Error updating calendar events:', error);
            showNotification('Error updating calendar events', 'error');
        });
    } catch (error) {
        console.error('Error in updateCalendarEventSimple:', error);
        showNotification('Error updating calendar', 'error');
    }
}

async function saveCalendarEvent(event) {
    try {
        const { error } = await supabase
            .from('calendar_events')
            .insert([event]);
            
        if (error) throw error;
    } catch (error) {
        console.error('Error saving calendar event:', error);
    }
}

async function removeCalendarEvents(homeworkId) {
    try {
        const { error } = await supabase
            .from('calendar_events')
            .delete()
            .eq('homework_id', homeworkId)
            .eq('type', 'reminder');
            
        if (error) throw error;
    } catch (error) {
        console.error('Error removing calendar events:', error);
    }
}

// Helper function to close modals
function closeModal() {
    // Close any open modals
    const editModal = document.getElementById('editModal');
    if (editModal) editModal.remove();
    
    const addModal = document.getElementById('addHomeworkModal');
    if (addModal) document.body.removeChild(addModal);
}

// Initialize
document.addEventListener('DOMContentLoaded', () => {
    fetchHomework();
    
    // Set the initial loading state with proper spacing
    homeworkList.innerHTML = `
        <div class="p-6 pt-8 animate-pulse">
            <div class="flex justify-between items-start">
                <div class="flex-1">
                    <div class="flex items-center space-x-4">
                        <div class="h-5 bg-gray-200 dark:bg-gray-700 rounded w-1/4"></div>
                        <div class="h-6 bg-gray-200 dark:bg-gray-700 rounded-full w-16"></div>
                    </div>
                    <div class="h-4 bg-gray-200 dark:bg-gray-700 rounded w-3/4 mt-2"></div>
                    <div class="mt-4 flex items-center space-x-4">
                        <div class="h-4 bg-gray-200 dark:bg-gray-700 rounded w-24"></div>
                        <div class="h-4 bg-gray-200 dark:bg-gray-700 rounded w-32"></div>
                    </div>
                </div>
                <div class="flex space-x-4">
                    <div class="h-6 w-6 bg-gray-200 dark:bg-gray-700 rounded"></div>
                    <div class="h-6 w-6 bg-gray-200 dark:bg-gray-700 rounded"></div>
                </div>
            </div>
        </div>
    `;
});

// Delete attachments function
async function deleteAttachments(attachmentIds) {
    try {
        const { error } = await supabase
            .from('homework_attachments')
            .delete()
            .in('id', attachmentIds);
            
        if (error) throw error;
    } catch (error) {
        console.error('Error deleting attachments:', error);
        throw error;
    }
}

// Helper function to delete all calendar events for a homework
async function deleteCalendarEventsForHomework(homeworkId) {
    try {
        const { error } = await supabase
            .from('calendar_events')
            .delete()
            .or(`type.eq.homework,type.eq.homework_reminder`)
            .eq('homework_id', homeworkId);
            
        if (error) throw error;
    } catch (error) {
        console.error('Error deleting calendar events:', error);
        throw error;
    }
}

// Helper function to create a calendar event
async function createCalendarEvent(eventData) {
    // Make sure we're using the correct column names
    const sanitizedEventData = {
        ...eventData,
        // If eventData has event_type, map it to type
        type: eventData.event_type || eventData.type,
        // If eventData has related_id, map it to homework_id
        homework_id: eventData.related_id || eventData.homework_id
    };
    
    // Remove any fields that don't match the DB schema
    if ('event_type' in sanitizedEventData) delete sanitizedEventData.event_type;
    if ('related_id' in sanitizedEventData) delete sanitizedEventData.related_id;
    
    try {
        const { error } = await supabase
            .from('calendar_events')
            .insert(sanitizedEventData);
            
        if (error) throw error;
    } catch (error) {
        console.error('Error creating calendar event:', error);
        throw error;
    }
}

// Helper function to get class color
function getClassColor(classId, isReminder = false) {
    const colors = {
        math: isReminder ? '#b3e0ff' : '#0099ff',
        science: isReminder ? '#b3ffb3' : '#00cc00',
        english: isReminder ? '#ffb3b3' : '#ff0000',
        history: isReminder ? '#ffdfb3' : '#ff9900',
        cs: isReminder ? '#d9b3ff' : '#9933ff',
        art: isReminder ? '#ffb3e6' : '#ff00cc',
        other: isReminder ? '#d9d9d9' : '#808080'
    };
    
    return colors[classId] || colors.other;
}

// Helper function to format date
function formatDate(date) {
    const options = { weekday: 'short', month: 'short', day: 'numeric', year: 'numeric' };
    return date.toLocaleDateString(undefined, options);
}

// Global function to reset submit button state
function resetSubmitButton() {
    if (!submittingHomeworkId) return;
    
    const submitBtn = document.getElementById(`submitBtn-${submittingHomeworkId}`);
    if (submitBtn) {
        const btnText = submitBtn.querySelector('.btn-text');
        const btnLoader = submitBtn.querySelector('.btn-loader');
        
        if (btnText && btnLoader) {
            btnText.classList.remove('hidden');
            btnLoader.classList.add('hidden');
            submitBtn.disabled = false;
        }
    }
    
    // Clear the ID
    submittingHomeworkId = null;
}

// Handle submit button click with loading animation
window.handleSubmitClick = async function(homeworkId) {
    try {
        // Set the current submitting homework ID
        submittingHomeworkId = homeworkId;
        
        // Get the button element
        const submitBtn = document.getElementById(`submitBtn-${homeworkId}`);
        if (!submitBtn) return;
        
        // Get text and loader elements
        const btnText = submitBtn.querySelector('.btn-text');
        const btnLoader = submitBtn.querySelector('.btn-loader');
        
        // Check if assignment is already completed
        const { data, error: fetchError } = await supabase
            .from('homework_assignments')
            .select(`
                id,
                homework_submissions(status)
            `)
            .eq('id', homeworkId)
            .single();
            
        if (fetchError) throw fetchError;
        
        const currentStatus = data.homework_submissions && data.homework_submissions[0] ? 
            data.homework_submissions[0].status : 'pending';
        
        if (currentStatus === 'completed') {
            showNotification('This assignment is already marked as completed.', 'info');
            submittingHomeworkId = null; // Reset the ID
            return;
        }
        
        // Show loading animation
        btnText.classList.add('hidden');
        btnLoader.classList.remove('hidden');
        
        // Disable the button to prevent multiple clicks
        submitBtn.disabled = true;
        
        // Call the submitHomework function after showing loading animation
        await submitHomework(homeworkId);
        
    } catch (error) {
        console.error('Error in handleSubmitClick:', error);
        showNotification('Error processing submission request', 'error');
        
        // Reset the button state on error
        resetSubmitButton();
    }
}; 